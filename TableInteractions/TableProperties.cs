using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;

namespace Handy.TableInteractions
{
    public class TableProperties : IEnumerable<KeyValuePair<PropertyInfo, ColumnAttribute>>
    {
        private readonly Type _tableType;
        private readonly TableAttribute _tableAttribute;
        private readonly KeyValuePair<PropertyInfo, ColumnAttribute> _primaryKeyProperty;
        private readonly KeyValuePair<PropertyInfo, ColumnAttribute>[] _properties;

        public TableProperties(Type tableType, TableAttribute tableAttribute)
        {
            _tableType = tableType ?? throw new ArgumentNullException(nameof(tableType));
            _tableAttribute = tableAttribute ?? throw new ArgumentNullException(nameof(tableAttribute));
            _properties = GetProperties().ToArray();

            KeyValuePair<PropertyInfo, ColumnAttribute> primaryKeyProperty = _properties
                .FirstOrDefault(currentPropertyValuePair => currentPropertyValuePair.Value.IsPrimaryKey);

            if (primaryKeyProperty.Key == null)
            {
                throw new NullReferenceException($"В таблице {_tableAttribute.Name} не существует первичного ключа!");
            }

            _primaryKeyProperty = primaryKeyProperty;
        }

        public KeyValuePair<PropertyInfo, ColumnAttribute> PrimaryKey => _primaryKeyProperty;

        private IEnumerable<KeyValuePair<PropertyInfo, ColumnAttribute>> GetProperties()
        {
            IEnumerable<PropertyInfo> properties = _tableType.GetProperties(BindingFlags.Public | BindingFlags.Instance)
                .Where(currentProperty => currentProperty.IsDefined(typeof(ColumnAttribute)));

            foreach (PropertyInfo currentProperty in properties)
            {
                ColumnAttribute currentAttribute = currentProperty.GetCustomAttribute<ColumnAttribute>();

                KeyValuePair<PropertyInfo, ColumnAttribute> newPropertyKeyValuePair =
                    new KeyValuePair<PropertyInfo, ColumnAttribute>(currentProperty, currentAttribute);

                yield return newPropertyKeyValuePair;
            }
        }

        public KeyValuePair<PropertyInfo, ColumnAttribute> GetProperty(int propertyIndex) => _properties[propertyIndex];

        public KeyValuePair<PropertyInfo, ColumnAttribute> GetProperty(string propertyColumnName)
        {
            if (string.IsNullOrWhiteSpace(propertyColumnName))
            {
                throw new ArgumentNullException(nameof(propertyColumnName));
            }

            KeyValuePair<PropertyInfo, ColumnAttribute> selectedProperty = _properties
                .FirstOrDefault(currentProperty => currentProperty.Value.Name == propertyColumnName);

            if (selectedProperty.Key == null)
            {
                throw new KeyNotFoundException($"Поле {propertyColumnName} не найдено");
            }

            return selectedProperty;
        }

        public KeyValuePair<PropertyInfo, ColumnAttribute> GetProperty(PropertyInfo property)
        {
            KeyValuePair<PropertyInfo, ColumnAttribute> selectedProperty = _properties
                .FirstOrDefault(currentProperty => currentProperty.Key == property);

            if (selectedProperty.Key == null)
            {
                throw new KeyNotFoundException($"Поле {property.Name} не найдено");
            }

            return selectedProperty;
        }

        public string GetPropertyName(in KeyValuePair<PropertyInfo, ColumnAttribute> property)
        {
            string propertyName = string
                .Join(".", _tableAttribute.GetFullTableName(), $"[{property.Value.Name}]");

            return propertyName;
        }

        public string GetTableProperties()
        {
            StringBuilder stringProperties = new StringBuilder("(");

            foreach (KeyValuePair<PropertyInfo, ColumnAttribute> currentKeyValuePair in _properties)
            {
                ColumnAttribute columnAttribute = currentKeyValuePair.Value;

                if (columnAttribute.IsAutoGenerated)
                {
                    continue;
                }

                stringProperties.Append($"[{columnAttribute.Name}], ");
            }

            stringProperties[stringProperties.Length - 2] = ')';

            return stringProperties.ToString();
        }

        public string GetTablePropertiesValue(object table)
        {
            StringBuilder stringPropertiesValue = new StringBuilder("(");

            foreach (KeyValuePair<PropertyInfo, ColumnAttribute> currentKeyValuePair in _properties)
            {
                ColumnAttribute columnAttribute = currentKeyValuePair.Value;

                if (columnAttribute.IsAutoGenerated)
                {
                    continue;
                }

                stringPropertiesValue.Append($"{ConvertFieldQuery(currentKeyValuePair.Key.GetValue(table))},");
            }

            stringPropertiesValue[stringPropertiesValue.Length - 1] = ')';

            return stringPropertiesValue.ToString();
        }

        public string GetTablePropertiesNameAndValue(object table)
        {
            StringBuilder stringProperties = new StringBuilder();

            foreach (KeyValuePair<PropertyInfo, ColumnAttribute> currentKeyValuePair in _properties)
            {
                ColumnAttribute columnAttribute = currentKeyValuePair.Value;

                if (columnAttribute.IsAutoGenerated)
                {
                    continue;
                }

                stringProperties
                    .Append($"[{columnAttribute.Name}] = {ConvertFieldQuery(currentKeyValuePair.Key.GetValue(table))}, ");
            }

            stringProperties.Remove(stringProperties.Length - 2, 2);

            return stringProperties.ToString();
        }

        public static string ConvertFieldQuery(object value)
        {
            if (value == null)
            {
                return "NULL";
            }

            switch (Type.GetTypeCode(value.GetType()))
            {
                case TypeCode.SByte:
                case TypeCode.Byte:
                case TypeCode.Int16:
                case TypeCode.Int32:
                case TypeCode.Int64:
                case TypeCode.UInt16:
                case TypeCode.UInt32:
                case TypeCode.UInt64:
                return value.ToString();
                case TypeCode.Single:
                case TypeCode.Decimal:
                case TypeCode.Double:
                return value.ToString().Replace(',', '.');
                case TypeCode.Boolean:
                case TypeCode.String:
                case TypeCode.DateTime:
                case TypeCode.Object:
                return $"'{value}'";
                default:
                throw new NotSupportedException($"The constant for '{value}' is not supported");
            }
        }

        public IEnumerator<KeyValuePair<PropertyInfo, ColumnAttribute>> GetEnumerator() => _properties.AsEnumerable().GetEnumerator();

        IEnumerator IEnumerable.GetEnumerator() => _properties.GetEnumerator();
    }
}